{"version":3,"sources":["components/find-users/FindUsers.module.css","common/Preloader/FormsControls/FormsControls.tsx","components/Dialogs/Dialog/DialogFormik.tsx","HOC/WithAuthRedirect.tsx","Redux/dialogsReducer.ts","components/Dialogs/Dialog/DialogContainer.tsx","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Contacts/ContactsContainer.tsx","components/Dialogs/Contacts/Contacts.tsx","components/Dialogs/Dialogs.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Navbar/NavbarContainer.tsx","api/api.ts","components/Navbar/Navbar.tsx","Redux/findUsersReducer.ts","assets/images/someAvatar.png","assets/images/preloader.svg","common/Preloader/Preloader.tsx","components/find-users/Users.tsx","Redux/findUsers-selector.ts","components/find-users/FindUsersContainer.tsx","components/Profile/MyPosts/Discription/ProfileStatusWithHooks.tsx","components/Profile/MyPosts/Discription/MyDiscription.tsx","Redux/profileReducer.ts","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/Discription/PostFormik.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","Redux/authReducer.ts","components/Profile/ProfileContainerClass.tsx","components/Header/Header.tsx","components/Navbar/HeaderContainer.tsx","components/Login/LoginFormik.tsx","Redux/appReducer.ts","App.tsx","Redux/navbarReducer.ts","Redux/ReduxStore.ts","index.tsx","components/Dialogs/Dialog/Dialog.module.css","common/Preloader/FormsControls/FormsControls.module.css","components/Dialogs/Contacts/Contacts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Discription/MyDiscription.module.css","components/Navbar/Navbar.module.css","components/Login/Login.module.css","components/Header/Header.module.css","components/Profile/Profile.module.css","components/Dialogs/Dialogs.module.css","components/Dialogs/Dialog/Dialogformik.module.css","components/News/News.module.css","components/Music/Music.module.css","components/Settings/Settings.module.css","common/Preloader/Preloader.module.css","components/Profile/MyPosts/Discription/ProfileStatus.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Discription/Postformik.module.css"],"names":["module","exports","InputLogin","field","form","touched","errors","props","className","textarea","login","undefined","email","error","type","InputPassword","password","Textarea","title","validate","value","DialogFormik","initialValues","onSubmit","values","setSubmitting","console","log","onMessageChange","newMessage","isSubmitting","name","placeholder","component","dialogformik","textError","disabled","mapStateToProps","state","isAuth","auth","WithAuthRedirect","Component","connect","restProps","to","initialState","contactsMessage","id","v1","nicName","avatar","link","dialogMessage","newDialog","compose","dialogPage","dispatch","text","action","newTitle","onMessageChangeActionCreator","Redirect","dialog","content","src","alt","message","nik","map","t","ContactsContainer","contacts","list","listItem","activeClassName","active","Dialogs","dialogs","DialogContainer","News","news","Music","music","Settings","settings","ResultCodesEnum","ResultCodeForCaptcha","NavbarContainer","navbar","siteBar","item","instance","axios","create","withCredentials","baseURL","headers","usersAPI","get","rememberMe","captcha","post","currentPage","pageSize","then","res","data","delete","profileAPI","userId","status","put","users","totalUserCount","isFetching","followingInProgress","follow","unfollow","setCurrentPage","setIsFetching","setIsFollowingProgress","Preloader","preloader","preLoader","Users","pagesCount","Math","ceil","pages","i","push","container","selected","p","selectedPage","onClick","onPageChanged","u","block","img","ava","photos","small","someAvatar","button","followed","unFollowTC","followTC","info","address","country","city","getUsers","usersPage","getPageSize","createSelector","filter","getTotalUserCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","pageNumber","getUsersTC","this","React","page","response","items","count","totalCount","resultCode","Success","ProfileStatusWithHooks","useState","editMode","setEditMode","setStatus","useEffect","stated","onDoubleClick","myId","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","MyDiscription","profile","description","large","fullName","Object","entries","c","keys","PostMessages","newPostText","addPost","updateNewPostText","newText","addLikePost","Post","postItem","nic","PostsFormik","onPostChange","postformik","texterror","mapDispatchToPost","addLike","MyPostsContainer","profilePage","Profile","titlePng","updateStatusTC","url","messages","setUserData","payload","setUserDataTC","captchaTC","logOutTC","ProfileContainerClass","match","params","setUserProfileTC","getStatusTC","setUserId","withRouter","Header","header","logo","loginBlock","HeaderContainer","validateEmail","test","validatePassword","length","loginTC","CaptchaIsRequired","Error","shape","icon","RedoOutlined","initialized","App","initializeAppTC","path","render","FindUsersContainer","app","rootReducer","combineReducers","stateCopy","tl","newPost","body","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.6aea003b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FindUsers_container__2ILUU\",\"selected\":\"FindUsers_selected__2muWT\",\"selectedPage\":\"FindUsers_selectedPage__3cCyC\",\"block\":\"FindUsers_block__1vcFl\",\"avatar\":\"FindUsers_avatar__1W7JQ\",\"ava\":\"FindUsers_ava__20aLl\",\"info\":\"FindUsers_info__34NxB\",\"title\":\"FindUsers_title__4C1JY\",\"address\":\"FindUsers_address__3WtJy\"};","import React from \"react\";\r\nimport textarea from \"./FormsControls.module.css\"\r\n\r\ntype propsType = {\r\n    field: any\r\n    props: any\r\n    form: {\r\n        touched: {\r\n            email: any\r\n            password: any\r\n            title: any\r\n        }\r\n        errors: {\r\n            email: any\r\n            password: any\r\n            title: any\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const InputLogin = ({field, form: {touched, errors}, ...props}: propsType) => {\r\n    return (\r\n        <div className={ textarea.login +' '+`${(touched.email === undefined) ? '' : textarea.error}` }>\r\n            <input type={'text'}  {...field} {...props} {...touched} {...errors}/>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const InputPassword = ({field, form: {touched, errors}, ...props}: propsType) => {\r\n    return(\r\n        <div className={ textarea.password +' '+`${(touched.password === undefined) ? '' : textarea.error}` }>\r\n            <input type={'text'}  {...field} {...touched} {...errors} {...props}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = ({field, form: {touched, errors}, ...props}: propsType) => {\r\n    return(\r\n        <div className={ textarea.textarea +' '+`${(touched.title === undefined) ? '' : textarea.error}` }>\r\n            <textarea type={'text'}  {...field} {...touched} {...errors} {...props}/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Field, Form, Formik} from 'formik';\r\nimport {Textarea} from \"../../../common/Preloader/FormsControls/FormsControls\";\r\nimport dialogformik from \"./Dialogformik.module.css\"\r\n\r\nfunction validate(value: any) {\r\n    let error;\r\n    if (!value || value === ' ') {\r\n        error = 'Enter yor message';\r\n    }\r\n    return error;\r\n}\r\n\r\nexport const DialogFormik = (props: any) => {\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{title: ''}}\r\n\r\n                onSubmit={(values, {setSubmitting}) => {\r\n                    console.log(values.title)\r\n                    props.onMessageChange(values.title)\r\n                    props.newMessage(values.title)\r\n                    setSubmitting(false)\r\n\r\n                }}\r\n            >\r\n                {({isSubmitting, errors, touched}) => (\r\n                    <Form>\r\n                        <div>\r\n                            <Field name=\"title\" placeholder={'Enter yor message'}  validate={validate} component={Textarea} />\r\n                                {errors.title && touched.title && <div className={dialogformik.textError}>{errors.title}</div>}\r\n                        </div>\r\n                        <button  type=\"submit\" disabled={isSubmitting}   >\r\n                            Submit\r\n                        </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppReduxStateType} from \"../Redux/ReduxStore\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppReduxStateType): MapStatePropsType => {\r\n    return {isAuth: state.auth.isAuth}\r\n}\r\n\r\nexport function WithAuthRedirect<T>( Component: React.ComponentType<T> )  {\r\n\r\n    const RedirectComponent: React.FC<MapStatePropsType> = (props) => {\r\n\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'} />\r\n\r\n        return <Component {...restProps as unknown as T} />\r\n}\r\n\r\nlet ConnectedRedirectComponent = connect<MapStatePropsType, {}, T, AppReduxStateType>(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n}\r\n\r\n","import {v1} from \"uuid\";\r\n\r\nexport type dialogPageType = {\r\n    contactsMessage: Array<AppContactsMessagePropsType>,\r\n    dialogMessage: Array<string>,\r\n    newDialog: string,\r\n}\r\n\r\n\r\n\r\nexport type AppContactsMessagePropsType = {\r\n    id: string,\r\n    avatar: string,\r\n    title: string,\r\n    nicName: string,\r\n    link: string\r\n}\r\n\r\ntype ActionType =\r\n    AddPostActionCreatorType\r\n    | UpdateNewPostTextActionCreatorType\r\n    | NewMessageActionCreatorType\r\n    | OnMessageChangeActionCreatorType\r\n    | addLikePostActionCreatorType\r\n\r\nexport type  AddPostActionCreatorType = {\r\n    type: 'ADD-POST'\r\n}\r\n\r\nexport type  UpdateNewPostTextActionCreatorType = {\r\n    type: 'UPDATE-NEW-POST-TEXT',\r\n    newText: string | undefined\r\n}\r\nexport type addLikePostActionCreatorType = {\r\n    type: 'ADD-LIKE-POST'\r\n    id: string,\r\n    count: number\r\n}\r\n\r\ntype  NewMessageActionCreatorType = {\r\n    type: 'ADD-MESSAGE',\r\n}\r\n\r\ntype  OnMessageChangeActionCreatorType = {\r\n    type: 'UPDATE-NEW-MESSAGE-TEXT',\r\n    newTitle: string | undefined,\r\n}\r\n\r\n\r\nlet initialState = {\r\n    contactsMessage: [\r\n        {\r\n            id: v1(),\r\n            nicName: \"Neo\",\r\n            avatar: \"https://cdn1.iconfinder.com/data/icons/diversity-avatars-volume-01-circles/64/matrix-neo-man-white-512.png\",\r\n            link: \"/dialogs/neo\",\r\n            title: \"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Architecto ea eligendi facere id\"\r\n        },\r\n        {\r\n            id: v1(),\r\n            nicName: \"Morphius\",\r\n            avatar: \"https://cdn1.iconfinder.com/data/icons/diversity-avatars-volume-01-circles/64/matrix-morpheus-512.png\",\r\n            link: \"/dialogs/morphius\",\r\n            title: \"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Architecto ea eligendi facere id\"\r\n        },\r\n        {\r\n            id: v1(),\r\n            nicName: \"Triniti\",\r\n            avatar: \"https://cdn1.iconfinder.com/data/icons/diversity-avatars-volume-01-circles/64/matrix-trinity-512.png\",\r\n            link: \"/dialogs/triniti\",\r\n            title: \"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Architecto ea eligendi facere id\"\r\n        },\r\n        {\r\n            id: v1(),\r\n            nicName: \"Mr.Smith\",\r\n            avatar: \"https://icons.iconarchive.com/icons/mattahan/ultrabuuf/256/TV-Smith-icon.png\",\r\n            link: \"/dialogs/mr.smith\",\r\n            title: \"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Architecto ea eligendi facere id\"\r\n        }\r\n    ] as Array<AppContactsMessagePropsType>,\r\n    dialogMessage: ['navbarReducer.ts', 'How are you'] as Array<string>,\r\n    newDialog: '',\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\n\r\n\r\nexport const dialogsReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    let stateCopy = {...state,\r\n        dialogMessage: [...state.dialogMessage]\r\n    }\r\n    switch (action.type) {\r\n        case 'UPDATE-NEW-MESSAGE-TEXT' :\r\n            if (action.newTitle != null) {\r\n                stateCopy.newDialog = action.newTitle;\r\n            }\r\n            return stateCopy\r\n        case 'ADD-MESSAGE':\r\n            let body = state.newDialog;\r\n            stateCopy.dialogMessage.push(body);\r\n            stateCopy.newDialog = '';\r\n\r\n            return stateCopy;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport let newMessageActionCreator = (): NewMessageActionCreatorType => ({type: 'ADD-MESSAGE'})\r\n\r\nexport let onMessageChangeActionCreator = (text: string | undefined): OnMessageChangeActionCreatorType => ({\r\n    type: 'UPDATE-NEW-MESSAGE-TEXT',\r\n    newTitle: text\r\n})\r\n\r\n\r\n\r\nexport let addPostActionCreator = (): AddPostActionCreatorType => ({type: 'ADD-POST'})\r\n\r\nexport let updateNewPostTextActionCreator = (text: string | undefined): UpdateNewPostTextActionCreatorType => ({\r\n    type: 'UPDATE-NEW-POST-TEXT',\r\n    newText: text\r\n})\r\nexport let addLikePostActionCreator = ( id: string, count: number): addLikePostActionCreatorType => ({\r\n    type: 'ADD-LIKE-POST',\r\n    count: count,\r\n    id: id\r\n})","import {Dialog} from \"./Dialog\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppReduxStateType} from \"../../../Redux/ReduxStore\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {WithAuthRedirect} from \"../../../HOC/WithAuthRedirect\";\r\nimport  {ComponentType} from \"react\";\r\nimport {newMessageActionCreator, onMessageChangeActionCreator} from \"../../../Redux/dialogsReducer\";\r\n\r\n\r\nlet mapStateToProps = (state: AppReduxStateType) => {\r\n    return {\r\n        title: state.dialogPage.dialogMessage,\r\n        value: state.dialogPage.newDialog,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        newMessage: () => {\r\n            dispatch(newMessageActionCreator())\r\n        },\r\n        onMessageChange: (text: string | undefined) => {\r\n            let action = onMessageChangeActionCreator(text)\r\n           dispatch(action);\r\n        },\r\n        Redirect\r\n    }\r\n}\r\n\r\n export default compose<ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect\r\n)(Dialog)","import React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport dialog from './Dialog.module.css';\r\nimport {DialogFormik} from './DialogFormik';\r\n\r\n\r\ntype DialogPropsType = {\r\n    title: Array<string>,\r\n    value: string\r\n    newMessage: () => void,\r\n    onMessageChange: (text: string | undefined) => void,\r\n    isAuth: boolean,\r\n    Redirect: typeof Redirect\r\n}\r\ntype textNewMessageType = any\r\n\r\n\r\n\r\nexport function Dialog(props: DialogPropsType) {\r\n\r\n    let textNewMessage: textNewMessageType = React.createRef();\r\n    let newMessage = () => {\r\n       props.newMessage(  )\r\n    }\r\n    let onMessageChange = () => {\r\n        let text = textNewMessage.current.value;\r\n        props.onMessageChange(text);\r\n    }\r\n   // if (!props.isAuth) return <Redirect to={'/login'}/>\r\n    return (\r\n\r\n        <div className={dialog.content}>\r\n            <img className={dialog.avatar}\r\n                 src={\"https://cdn1.iconfinder.com/data/icons/diversity-avatars-volume-01-circles/64/matrix-neo-man-white-512.png\"}\r\n                 alt={\"avatar\"}/>\r\n            <div className={dialog.message}>\r\n                <div className={dialog.nik}>\r\n                    unnamed\r\n                </div>\r\n                <div className={dialog.title}>\r\n                    {\r\n                        props.title.map(t => <div className={dialog.dialog}>{t}</div>)\r\n                    }\r\n                    <div>\r\n                        <DialogFormik {...props}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Contacts} from \"./Contacts\";\r\nimport {AppReduxStateType} from \"../../../Redux/ReduxStore\";\r\n\r\nexport type AppContactsMessagePropsType = {\r\n    id: string,\r\n    avatar: string,\r\n    title: string,\r\n    nicName: string,\r\n    link: string\r\n}\r\n\r\n\r\nexport type mapToContactPropsType = {\r\n    title: Array<AppContactsMessagePropsType>\r\n}\r\n\r\n\r\nlet mapToContact = (state: AppReduxStateType): mapToContactPropsType => {\r\n    return{\r\n        title: state.dialogPage.contactsMessage\r\n    }\r\n}\r\n\r\nexport const ContactsContainer = connect(mapToContact)(Contacts)","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport contacts from './Contacts.module.css';\r\n\r\ntype ContactsPropsType = {\r\n    title: Array<ContactsItemPropsType>\r\n}\r\ntype ContactsItemPropsType = {\r\n    id: string,\r\n    nicName: string,\r\n    avatar: string\r\n    link: string\r\n}\r\n\r\nexport function Contacts(props: ContactsPropsType) {\r\n\r\n    return (\r\n        <div className={contacts.content}>\r\n            <h3>Contacts</h3>\r\n            <ul className={contacts.list}>\r\n                {\r\n                    props.title.map(t => {\r\n                        return (\r\n                            <li className={contacts.listItem}>\r\n                                <img className={contacts.avatar}\r\n                                     src={t.avatar}\r\n                                     alt={'avatar'}\r\n                                />\r\n                                <NavLink className={contacts.link}\r\n                                         activeClassName={contacts.active}\r\n                                         to={t.link}>\r\n                                    {t.nicName}\r\n                                </NavLink>\r\n                            </li>\r\n                        );\r\n                    })\r\n                }\r\n            </ul>\r\n        </div>\r\n    );\r\n\r\n}","import React from 'react';\r\nimport dialogs from './Dialogs.module.css';\r\nimport DialogContainer from \"./Dialog/DialogContainer\";\r\nimport {ContactsContainer} from \"./Contacts/ContactsContainer\";\r\n\r\n\r\n\r\n\r\nexport function Dialogs() {\r\n    return (\r\n            <div className={dialogs.content}>\r\n                <ContactsContainer/>\r\n                <DialogContainer/>\r\n\r\n            </div>\r\n    );\r\n\r\n}","import React from 'react';\r\nimport news from './News.module.css';\r\n\r\nexport function News() {\r\n    return (\r\n        <div className={news.content}>\r\n            news\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport music from './Music.module.css';\r\n\r\nexport function Music() {\r\n    return (\r\n        <div className={music.content}>\r\n            music\r\n\r\n        </div>\r\n    );\r\n\r\n}","import React from 'react';\r\nimport settings from './Settings.module.css';\r\n\r\nexport function Settings() {\r\n    return (\r\n        <div className={settings.content}>\r\n            settings\r\n\r\n        </div>\r\n    );\r\n\r\n}","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Navbar} from \"./Navbar\";\r\nimport {AppReduxStateType} from \"../../Redux/ReduxStore\";\r\nimport {AppNavbarPropsType} from \"../../Redux/navbarReducer\";\r\n\r\n\r\nexport type mapStateNavbarPropsType = {\r\n    title: Array<AppNavbarPropsType>\r\n}\r\n\r\nexport type onPropsType = mapStateNavbarPropsType\r\n\r\n\r\nlet mapStateToNavbar = (state: AppReduxStateType): mapStateNavbarPropsType => {\r\n    return {\r\n        title: state.navbar.list\r\n    }\r\n}\r\n\r\n\r\nexport const NavbarContainer = connect(mapStateToNavbar)(Navbar)\r\n\r\n","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": '039f23ab-7747-49fb-85d5-08f315224e87'\r\n    },\r\n});\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodeForCaptcha {\r\n    Success = 0,\r\n    Error = 1,\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\ntype MeResponseType = {\r\n    data: {\r\n        id: number\r\n        email: string\r\n        login: string\r\n    },\r\n    resultCode: ResultCodesEnum\r\n    messages: Array<string>\r\n}\r\ntype LoginResponseType = {\r\n    data: {\r\n        id: number\r\n    },\r\n    resultCode: ResultCodeForCaptcha\r\n    messages: Array<string>\r\n}\r\nexport type UsersType = {\r\n    name: string\r\n    id: number,\r\n    photos: {\r\n        \"small\": string | null,\r\n        \"large\": string | null\r\n    },\r\n    status: string | null,\r\n    followed: boolean\r\n}\r\ntype GetUsersResponseType = {\r\n    items: Array<UsersType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\ntype FollowUnFollowAPIType = {\r\n    resultCode: ResultCodesEnum\r\n    messages: Array<string>\r\n    data: {}\r\n}\r\ntype GetCaptcha = {\r\n    url: string\r\n}\r\ntype LogOutType = {\r\n    resultCode: ResultCodesEnum\r\n    messages: Array<string>\r\n    data: {}\r\n}\r\n\r\n\r\nexport const usersAPI = {\r\n\r\n    getLogin() {\r\n        return instance.get<MeResponseType>('auth/me')\r\n    },\r\n\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha?: string) {\r\n        return instance.post<LoginResponseType>('auth/login', {email, password, rememberMe, captcha})\r\n    },\r\n\r\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\r\n        return instance.get<GetUsersResponseType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(res => res.data)\r\n    },\r\n\r\n    followApi(id: number) {\r\n        return instance.post<FollowUnFollowAPIType>(`follow/${id}`, {})\r\n    },\r\n\r\n    unFollowApi(id: number) {\r\n        return instance.delete<FollowUnFollowAPIType>(`follow/${id}`, {})\r\n    },\r\n\r\n    getCaptcha() {\r\n        return instance.get<GetCaptcha>('security/get-captcha-url')\r\n    },\r\n\r\n    logOut() {\r\n        return instance.delete<LogOutType>('auth/login')\r\n    }\r\n\r\n}\r\n\r\ntype GetProfileAPIType = {\r\n    contacts: ContactsType,\r\n    fullName: string | null,\r\n    lookingForAJob: boolean | null,\r\n    lookingForAJobDescription: string | null,\r\n    photos: PhotosType,\r\n    userId: number\r\n}\r\ntype ContactsType = {\r\n    facebook: string | null,\r\n    website: string | null,\r\n    vk: string | null,\r\n    twitter: string | null,\r\n    instagram: string | null,\r\n    mainLink: string | null\r\n}\r\ntype PhotosType = {\r\n    small: string | undefined,\r\n    large: string | undefined,\r\n}\r\n\r\n\r\ntype UpdateStatusType = {\r\n    resultCode: ResultCodesEnum\r\n    messages: Array<string>\r\n    data: {}\r\n}\r\n\r\nexport const profileAPI = {\r\n\r\n    getProfileApi(userId: number = 16115) {\r\n        return instance.get<GetProfileAPIType>(`profile/ ` + userId)\r\n    },\r\n\r\n    getStatus(userId: string = '16115') {\r\n        return instance.get(`profile/status/ ` + userId)\r\n    },\r\n\r\n    updateStatus(status: string) {\r\n        return instance.put<UpdateStatusType>(`profile/status/ `, {status: status})\r\n    },\r\n\r\n\r\n}\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport navbar from './Navbar.module.css';\r\n\r\nexport type navbarPropsType = {\r\n    title:  Array<navbarItemPropsType>\r\n}\r\n\r\nexport type navbarItemPropsType = {\r\n    id: string,\r\n    title: string,\r\n    link: string\r\n}\r\n\r\nexport function Navbar(props: navbarPropsType) {\r\n    return (\r\n        <nav className={navbar.siteBar}>\r\n            {\r\n                props.title.map(t => {\r\n                    return (\r\n                        <div className={navbar.item}>\r\n                            <NavLink className={navbar.link}\r\n                                     activeClassName={navbar.active}\r\n                                     to={t.link}>{t.title}\r\n                            </NavLink>\r\n                        </div>\r\n                    );\r\n                })\r\n            }\r\n        </nav>\r\n    );\r\n}","\r\nimport {Dispatch} from \"redux\";\r\nimport {ResultCodesEnum, usersAPI, UsersType} from \"../api/api\";\r\nimport {AppActionType, AppThunkType} from \"./ReduxStore\";\r\n\r\nexport type InitialStateType =\r\n    {\r\n        users: Array<UsersType>,\r\n        pageSize: number,\r\n        totalUserCount: number,\r\n        currentPage: number,\r\n        isFetching: boolean\r\n        followingInProgress: boolean\r\n    }\r\n\r\ntype followType = ReturnType<typeof follow>\r\ntype unFollowType = ReturnType<typeof unfollow>\r\ntype setUsersType = ReturnType<typeof setUsers>\r\ntype setCurrentPageType = ReturnType<typeof setCurrentPage>\r\ntype setTotalUserCountType = ReturnType<typeof setTotalUserCount>\r\ntype setIsFetchingType = ReturnType<typeof setIsFetching>\r\ntype setIsFollowingProgressType = ReturnType<typeof setIsFollowingProgress>\r\n\r\nexport type AllFindUsersActionCreatorType =\r\n    | followType\r\n    | unFollowType\r\n    | setUsersType\r\n    | setCurrentPageType\r\n    | setTotalUserCountType\r\n    | setIsFetchingType\r\n    | setIsFollowingProgressType\r\n\r\n\r\nlet initialState = {\r\n    users: [] as Array<UsersType>,\r\n    pageSize: 10,\r\n    totalUserCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: false\r\n}\r\n\r\nexport const findUsersReducer = (state: InitialStateType = initialState, action: AllFindUsersActionCreatorType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'FOLLOW' :\r\n            return {\r\n                ...state,\r\n                users: state.users.map((u: UsersType) => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n\r\n        case 'UNFOLLOW' :\r\n            return {\r\n                ...state,\r\n                users: state.users.map((u: UsersType) => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n\r\n        case 'SET-USERS': {\r\n            return {...state, users: action.users}\r\n        }\r\n\r\n        case 'SET-CURRENT-PAGE': {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n\r\n        case 'SET-TOTAL-USER-COUNT': {\r\n            return {...state, totalUserCount: action.count}\r\n        }\r\n\r\n        case 'TOGGLE-IS-FETCHING': {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n\r\n        case \"TOGGLE-IS-FOLLOWING-PROGRESS\": {\r\n            return {...state, followingInProgress: action.followingInProgress}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const follow = (userId: number) => ({type: 'FOLLOW', userId} as const)\r\nexport const unfollow = (userId: number) => ({type: 'UNFOLLOW', userId} as const)\r\nexport const setUsers = (users: Array<UsersType>) => ({type: 'SET-USERS', users} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({type: 'SET-CURRENT-PAGE', currentPage} as const)\r\nexport const setTotalUserCount = (totalUserCount: number) => ({\r\n    type: 'SET-TOTAL-USER-COUNT',\r\n    count: totalUserCount\r\n} as const)\r\nexport const setIsFetching = (isFetching: boolean) => ({type: 'TOGGLE-IS-FETCHING', isFetching: isFetching} as const)\r\nexport const setIsFollowingProgress = (followingInProgress: boolean) => ({\r\n    type: 'TOGGLE-IS-FOLLOWING-PROGRESS',\r\n    followingInProgress\r\n} as const)\r\n\r\nexport const getUsersTC = (page: number, pageSize: number): AppThunkType => {\r\n    return (dispatch: Dispatch<AppActionType>) => {\r\n        dispatch(setIsFetching(true))\r\n        dispatch(setCurrentPage(page))\r\n        usersAPI.getUsers(page, pageSize)\r\n            .then(response => {\r\n                dispatch(setIsFetching(false))\r\n                dispatch(setUsers(response.items))\r\n                dispatch(setTotalUserCount(response.totalCount))\r\n            })\r\n    }\r\n}\r\n\r\nexport const followTC = (userId: number): AppThunkType => {\r\n    return (dispatch: Dispatch<AppActionType>) => {\r\n        dispatch(setIsFollowingProgress(true))\r\n        usersAPI.followApi(userId)\r\n            .then(response => {\r\n                if (response.data.resultCode === ResultCodesEnum.Success) {\r\n                    dispatch(follow(userId))\r\n                }\r\n                dispatch(setIsFollowingProgress(false))\r\n            })\r\n    }\r\n}\r\n\r\nexport const unFollowTC = (userId: number): AppThunkType => {\r\n    return (dispatch: Dispatch<AppActionType>) => {\r\n        dispatch(setIsFollowingProgress(true))\r\n        usersAPI.unFollowApi(userId)\r\n            .then(response => {\r\n                if (response.data.resultCode === ResultCodesEnum.Success) {\r\n                    dispatch(unfollow(userId))\r\n                }\r\n                dispatch(setIsFollowingProgress(false))\r\n            })\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/someAvatar.abe53919.png\";","export default __webpack_public_path__ + \"static/media/preloader.c5c900b0.svg\";","import React from \"react\";\r\nimport preLoader from \"../../assets/images/preloader.svg\";\r\nimport preloader from \"./Preloader.module.css\"\r\n\r\n\r\nexport function Preloader () {\r\n    return (\r\n        <div>\r\n            <img className={preloader.preloader}\r\n                                     src={preLoader}\r\n                                     alt={'preloader'}/>\r\n        </div>\r\n    )\r\n\r\n\r\n}","import React from \"react\";\r\nimport users from \"./FindUsers.module.css\";\r\nimport someAvatar from \"../../assets/images/someAvatar.png\";\r\nimport {UsersPropsType} from \"./FindUsersContainer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nexport let Users = (props: UsersPropsType) => {\r\n    let pagesCount = Math.ceil(props.totalUserCount / props.pageSize)\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    return (\r\n        <div className={users.container}>\r\n\r\n            {props.isFetching ? <Preloader/> : null}\r\n\r\n            <div className={users.selected}>\r\n                 {pages.map(p => {\r\n                    return (\r\n                        <span className={props.currentPage === p ? users.selectedPage : ''} onClick={() => {\r\n                            props.onPageChanged(p)\r\n                        }}>{p} </span>\r\n                    )\r\n                })}\r\n            </div>\r\n            {\r\n\r\n                props.users.map((u: any) => <div key={u.id} className={users.block}>\r\n\r\n                    <div className={users.avatar}>\r\n                        <div className={users.img}>\r\n                            <NavLink to={'/profile/' + u.id}>\r\n                                <img className={users.ava}\r\n                                     src={u.photos.small != null ? u.photos.small : someAvatar} alt={'avatar'}/>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div className={users.button}>\r\n                            {u.followed\r\n                                ? <button disabled={props.followingInProgress} onClick={() => {\r\n                                    props.unFollowTC(u.id)\r\n                                }}>unfollow</button>\r\n\r\n                                : <button disabled={props.followingInProgress} onClick={() => {\r\n                                    props.followTC(u.id)\r\n                                }}>follow</button>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div className={users.info}>\r\n                        <div className={users.title}>\r\n                            <div className={users.name}>\r\n                                {u.name}\r\n                            </div>\r\n                            <div className={users.status}>\r\n                                {u.status}\r\n                            </div>\r\n                        </div>\r\n                        <div className={users.address}>\r\n                            <div className={users.country}>\r\n                                {\"u.location.country\"}\r\n                            </div>\r\n                            <div className={users.city}>\r\n                                {\"u.location.city\"}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>)\r\n            }\r\n        </div>\r\n    )\r\n\r\n}","import {AppReduxStateType} from \"./ReduxStore\";\r\nimport {create} from \"domain\";\r\nimport {createSelector} from \"reselect\";\r\n\r\nexport const getUsers = (state: AppReduxStateType) => {\r\n    return state.usersPage.users\r\n}\r\nexport const getUserSelector = createSelector(getUsers ,(users) => {\r\n    users.filter( u => true);\r\n})\r\n\r\nexport const getPageSize = (state: AppReduxStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUserCount = (state: AppReduxStateType) => {\r\n    return state.usersPage.totalUserCount\r\n}\r\nexport const getCurrentPage = (state: AppReduxStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: AppReduxStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state: AppReduxStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n","import React, {ComponentType} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n    follow,\r\n    followTC,\r\n    getUsersTC,\r\n    setCurrentPage,\r\n    setIsFollowingProgress,\r\n    unfollow,\r\n    unFollowTC\r\n} from '../../Redux/findUsersReducer';\r\nimport {AppReduxStateType} from '../../Redux/ReduxStore';\r\nimport {Users} from './Users';\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUserCount,\r\n    getUsers\r\n} from \"../../Redux/findUsers-selector\";\r\nimport {UsersType} from \"../../api/api\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    users: ReturnType<typeof getUsers>,\r\n    pageSize: ReturnType<typeof getPageSize>\r\n    totalUserCount: ReturnType<typeof getTotalUserCount>\r\n    currentPage: ReturnType<typeof getCurrentPage>\r\n    isFetching: ReturnType<typeof getIsFetching>\r\n    followingInProgress: ReturnType<typeof getFollowingInProgress>\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    follow: (userId: string) => void,\r\n    unfollow: (userId: string) => void,\r\n    setIsFollowingProgress: (followingInProgress: boolean) => void,\r\n    getUsersTC: (currentPage: number ,pageSize: number) => void,\r\n    setCurrentPage: (currentPage: number) => void,\r\n    unFollowTC: (userId: string) => void,\r\n    followTC: (userId: string) => void\r\n}\r\n\r\nexport type FindUsersPropsType = MapStatePropsType & mapDispatchToPropsType\r\n\r\n\r\nexport type UsersPropsType = {\r\n    totalUserCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: Array<UsersType>,\r\n    follow: (userId: string) => void,\r\n    unfollow: (userId: string) => void,\r\n    isFetching: boolean,\r\n    followingInProgress: boolean,\r\n    getUsersTC: (currentPage: number ,pageSize: number) => void,\r\n    setCurrentPage: (currentPage: number) => void,\r\n    unFollowTC: (userId: string) => void,\r\n    followTC: (userId: string) => void\r\n}\r\n\r\n\r\nexport class UsersContainer extends React.Component<FindUsersPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsersTC(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUsersTC(pageNumber, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <Users totalUserCount={this.props.totalUserCount}\r\n                      pageSize={this.props.pageSize}\r\n                      currentPage={this.props.currentPage}\r\n                      onPageChanged={this.onPageChanged}\r\n                      users={this.props.users}\r\n                      follow={this.props.follow}\r\n                      unfollow={this.props.unfollow}\r\n                      isFetching={this.props.isFetching}\r\n                      followingInProgress={this.props.followingInProgress}\r\n                      getUsersTC={this.props.getUsersTC}\r\n                      setCurrentPage={this.props.setCurrentPage}\r\n                      unFollowTC={this.props.unFollowTC}\r\n                      followTC={this.props.followTC}\r\n         />\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppReduxStateType): MapStatePropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUserCount: getTotalUserCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {follow, unfollow, setCurrentPage, setIsFollowingProgress, getUsersTC, unFollowTC, followTC}),\r\n)(UsersContainer)","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport stated from \"./ProfileStatus.module.css\"\r\n\r\ntype StatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string | null) => void\r\n    userId: number\r\n    myId: number\r\n}\r\n\r\n\r\nexport function ProfileStatusWithHooks(props: StatusPropsType) {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n\r\n    const activateMode = () => {\r\n        if (props.userId === props.myId) {\r\n            setEditMode(true)\r\n        }\r\n    }\r\n    const deActivateMode = () => {\r\n        if (props.userId === props.myId) {\r\n        setEditMode(false)\r\n            props.updateStatus(status)\r\n        }\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status ])\r\n\r\n\r\n\r\n    return (\r\n        <div className={stated.container}>\r\n            {!editMode &&\r\n            <div>\r\n                    <span\r\n                        onDoubleClick={activateMode}>\r\n                        {props.status || '-------'}\r\n                    </span>\r\n            </div>}\r\n            {editMode &&\r\n            <div>\r\n                <input type=\"text\"\r\n                       autoFocus={true}\r\n                       onBlur={deActivateMode}\r\n                       value={status}\r\n                       onChange={onStatusChange}\r\n\r\n\r\n                />\r\n            </div>}\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n","import React from 'react';\r\nimport description from './MyDiscription.module.css';\r\nimport {Preloader} from \"../../../../common/Preloader/Preloader\";\r\nimport {ProfileType} from \"../../../../Redux/profileReducer\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\n\r\ntype MyDiscriptionPropsType = {\r\n    profile: ProfileType | null,\r\n    status: string ,\r\n    updateStatus: (status: string | null) => void\r\n    myId: number\r\n}\r\n\r\nexport function MyDiscription(props: MyDiscriptionPropsType) {\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    } else {\r\n        return (\r\n            <div className={description.info}>\r\n                <img className={description.avatar}\r\n                     src={props.profile.photos.large} alt={'avatar'}/>\r\n                <div className={description.description}>\r\n                    <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus} userId={props.profile.userId} myId={props.myId}/>\r\n                    <div>name: {props.profile.fullName}</div>\r\n                    {\r\n                        Object.entries(props.profile.contacts).map(c => {\r\n                            return (\r\n                                <div className={description.contacts}>\r\n                                    <span className={description.keys}>{c[0]}: </span>\r\n                                    <span> {c[1]}</span>\r\n                                </div>)\r\n                        })\r\n                    }\r\n\r\n                    <div>????</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {v1} from \"uuid\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppActionType, AppThunkType} from \"./ReduxStore\";\r\nimport {profileAPI, ResultCodesEnum} from \"../api/api\";\r\n\r\n\r\nexport type PostMessagesPropsType = {\r\n    id: string,\r\n    avatar: string,\r\n    nicName: string,\r\n    message: string,\r\n    count: number\r\n}\r\ntype AddPostType = {\r\n    type: 'ADD-POST'\r\n}\r\ntype UpdateNewPostTextType = {\r\n    type: 'UPDATE-NEW-POST-TEXT',\r\n    newText: string | undefined\r\n}\r\ntype addLikePostType = {\r\n    type: 'ADD-LIKE-POST',\r\n    count: number,\r\n    id: string\r\n}\r\ntype setUserProfileType = {\r\n    type: 'SET-USER-PROFILE',\r\n    profile: any\r\n}\r\ntype SetStatusType = ReturnType<typeof setStatus>\r\n\r\nexport type AllProfileReducerActionType =\r\n    | AddPostType\r\n    | UpdateNewPostTextType\r\n    | addLikePostType\r\n    | setUserProfileType\r\n    | SetStatusType\r\n\r\nexport type ProfileType = {\r\n    contacts: ContactsType,\r\n    fullName:  string | null,\r\n    lookingForAJob:  boolean | null,\r\n    lookingForAJobDescription:  string | null,\r\n    photos: PhotosType,\r\n    userId: number\r\n}\r\ntype ContactsType = {\r\n    facebook:  string | null,\r\n    website: string | null,\r\n    vk:  string | null,\r\n    twitter: string | null,\r\n    instagram: string | null,\r\n    mainLink: string | null\r\n}\r\ntype PhotosType={\r\n    small:  string | undefined,\r\n    large:  string | undefined,\r\n}\r\nlet initialState = {\r\n    PostMessages: [\r\n        {\r\n            id: v1(),\r\n            avatar: \"https://cdn1.iconfinder.com/data/icons/diversity-avatars-volume-01-circles/64/matrix-trinity-512.png\",\r\n            nicName: \"Trinitttttti\",\r\n            message: \"How are yuo\",\r\n            count: 42\r\n        },\r\n        {\r\n            id: v1(),\r\n            avatar: \"https://icons.iconarchive.com/icons/mattahan/ultrabuuf/256/TV-Smith-icon.png\",\r\n            nicName: \"Mr.Smith\",\r\n            message: \"I am kill yor\",\r\n            count: 422\r\n        },\r\n        {\r\n            id: v1(),\r\n            avatar: \"https://icons.iconarchive.com/icons/mattahan/ultrabuuf/256/TV-Smith-icon.png\",\r\n            nicName: \"Mrrrrr.Smith\",\r\n            message: \"I am kill yor\",\r\n            count: 422\r\n        },\r\n        {\r\n            id: v1(),\r\n            avatar: \"https://icons.iconarchive.com/icons/mattahan/ultrabuuf/256/TV-Smith-icon.png\",\r\n            nicName: \"Mr.Smith\",\r\n            message: \"I am kill yor\",\r\n            count: 422\r\n        },\r\n    ] as Array<PostMessagesPropsType>,\r\n    newPostText: '',\r\n    profile: null as ProfileType | null,\r\n    status: '' as string\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\nexport const profileReducer = (state: initialStateType = initialState, action: AllProfileReducerActionType): initialStateType => {\r\n    let stateCopy = {...state}\r\n    switch (action.type) {\r\n        case  'UPDATE-NEW-POST-TEXT' :\r\n            if (action.newText != null) {\r\n                stateCopy.newPostText = action.newText;\r\n            }\r\n            return stateCopy;\r\n\r\n        case \"ADD-LIKE-POST\" :\r\n            stateCopy.PostMessages = [...state.PostMessages]\r\n            stateCopy.PostMessages = state.PostMessages.map((tl: PostMessagesPropsType) => tl.id === action.id ? {\r\n                ...tl,\r\n                count: ++action.count\r\n            } : tl)\r\n            return stateCopy\r\n\r\n        case 'ADD-POST' :\r\n            let newPost = {\r\n                id: v1(),\r\n                avatar: \"https://cdn2.iconfinder.com/data/icons/coding-7/100/coding-matrix-coding-developer-the-matrix-hacker-neo-program-low-level-code-512.png\",\r\n                nicName: \"unnamed\",\r\n                message: stateCopy.newPostText,\r\n                count: 0,\r\n            };\r\n            stateCopy.PostMessages = [...state.PostMessages]\r\n            stateCopy.PostMessages.push(newPost);\r\n            stateCopy.newPostText = '';\r\n            return stateCopy;\r\n\r\n        case 'SET-USER-PROFILE' :\r\n            return {...state, profile: action.profile}\r\n\r\n        case \"SET-STATUS\":\r\n            return {...state, status: action.status}\r\n\r\n\r\n        default:\r\n            return stateCopy;\r\n    }\r\n\r\n}\r\nexport let addPost = (): AddPostType => ({type: 'ADD-POST'})\r\nexport let updateNewPostText = (text: string | undefined): UpdateNewPostTextType => ({\r\n    type: 'UPDATE-NEW-POST-TEXT',\r\n    newText: text\r\n})\r\nexport let addLikePost = (id: string, count: number): addLikePostType => ({\r\n    type: 'ADD-LIKE-POST',\r\n    count: count,\r\n    id: id\r\n})\r\nexport const setUserProfile = (profile: ProfileType): setUserProfileType => ({\r\n    type: 'SET-USER-PROFILE', profile\r\n})\r\nexport const setStatus = (status: string ) => ({\r\n    type: 'SET-STATUS', status\r\n} as const)\r\n\r\n\r\nexport const setUserProfileTC = (userId:  number ): AppThunkType => {\r\n    return (dispatch: Dispatch<AppActionType>) => {\r\n        profileAPI.getProfileApi(userId)\r\n            .then(response => {\r\n                dispatch(setUserProfile(response.data))\r\n            })\r\n    }\r\n}\r\n\r\nexport const getStatusTC = (userId: string): AppThunkType => {\r\n    return (dispatch: Dispatch<AppActionType>) => {\r\n        profileAPI.getStatus(userId)\r\n            .then(res => {\r\n                dispatch(setStatus(res.data))\r\n            })\r\n    }\r\n}\r\n\r\nexport const updateStatusTC = (status: string): AppThunkType => {\r\n    return (dispatch: Dispatch<AppActionType>) => {\r\n        profileAPI.updateStatus(status)\r\n            .then(res => {\r\n                if (res.data.resultCode === ResultCodesEnum.Success) {\r\n                    dispatch(setStatus(status))\r\n                }\r\n            })\r\n    }\r\n}","import React from 'react';\r\nimport post from './Post.module.css';\r\nimport {PostMessagesPropsType} from \"../../../../App\";\r\n\r\ntype MyPostPropsType = {\r\n    title: Array<PostMessagesPropsType>,\r\n    onChange: ( id: string, count: number) => void\r\n\r\n}\r\n\r\nexport function Post(props: MyPostPropsType) {\r\n\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                props.title.map(t => {\r\n                    let addLike = () => {\r\n                        props.onChange( t.id, t.count);\r\n                    }\r\n                    return (\r\n                        <div className={post.post}>\r\n                            <div className={post.postItem}>\r\n                                <div className={post.nic}>{t.nicName}</div>\r\n                                <img className={post.avatar}\r\n                                     src={t.avatar}\r\n                                     alt={\"avatar\"}/>\r\n                            </div>\r\n                            <div className={post.title}>\r\n                                <div className={post.item}>{t.message}</div>\r\n                                <button onClick={addLike}>like\r\n                                </button>\r\n                                <span>count:{t.count}</span>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n\r\n    );\r\n}","import React from \"react\";\r\nimport {Field, Form, Formik} from 'formik';\r\nimport {Textarea} from \"../../../../common/Preloader/FormsControls/FormsControls\";\r\nimport postformik from \"./Postformik.module.css\"\r\n\r\nfunction validate(value: any) {\r\n    let error;\r\n    if (!value) {\r\n        error = 'Enter yor message';\r\n    }\r\n    return error;\r\n}\r\n\r\nexport const PostsFormik = (props: any) => {\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{title: ''}}\r\n\r\n                onSubmit={(values, {setSubmitting}) => {\r\n                    props.onPostChange(values.title)\r\n                    props.addPost()\r\n                    setSubmitting(false)\r\n\r\n                }}\r\n            >\r\n                {({isSubmitting, errors, touched}) => (\r\n                    <Form>\r\n                        <div>\r\n                            <Field name=\"title\" placeholder={'Enter yor message'}  validate={validate} component={Textarea} />\r\n                                {errors.title && touched.title && <div className={postformik.texterror}>{errors.title}</div>}\r\n                        </div>\r\n                        <button  type=\"submit\" disabled={isSubmitting} >\r\n                            Submit\r\n                        </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport {addLikePost, addPost, PostMessagesPropsType, updateNewPostText} from \"../../../Redux/profileReducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppReduxStateType} from \"../../../Redux/ReduxStore\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {WithAuthRedirect} from \"../../../HOC/WithAuthRedirect\";\r\n\r\n\r\nexport type mapStatePropsType = {\r\n    newPostText: string\r\n    title: Array<PostMessagesPropsType>\r\n}\r\nexport type mapDispatchPropsType = {\r\n    addPost: () => void\r\n    onPostChange: (text: string | undefined) => void\r\n    addLike: (id: string, count: number) => void\r\n}\r\n\r\nexport type MyPostsPropsType = mapStatePropsType & mapDispatchPropsType\r\n\r\n\r\nlet mapStateToPost = (state: AppReduxStateType): mapStatePropsType => {\r\n    return {\r\n        newPostText: state.profilePage.newPostText,\r\n        title: state.profilePage.PostMessages\r\n    }\r\n}\r\nlet mapDispatchToPost = {\r\n    addPost: addPost,\r\n    onPostChange: updateNewPostText,\r\n    addLike: addLikePost,\r\n    Redirect\r\n}\r\n\r\n\r\n const MyPostsContainer = connect(mapStateToPost, mapDispatchToPost)(MyPosts);\r\n\r\nexport default compose<ComponentType>(\r\n    WithAuthRedirect\r\n)(MyPostsContainer)","import React from 'react';\r\nimport profile from './MyPosts.module.css';\r\nimport {Post} from \"./Post/Post\";\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport {PostsFormik} from \"./Discription/PostFormik\";\r\n\r\n\r\nexport function MyPosts(props: MyPostsPropsType) {\r\n\r\n /*   let newPostElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    let onAddPost = () => {\r\n\r\n        props.addPost();\r\n        //props.dispatch(addPostActionCreator());\r\n    }\r\n\r\n    let updatePostChange = () => {\r\n\r\n        let text = newPostElement.current?.value;\r\n        props.onPostChange(text)\r\n        //props.dispatch(updateNewPostTextActionCreator(text));\r\n    }*/\r\n    let onAddLike = (id: string, count: number) => {\r\n        props.addLike(id, count)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={profile.content}>\r\n            <h4>my posts</h4>\r\n            <div>\r\n                   <PostsFormik  {...props} />\r\n            </div>\r\n            <div>\r\n                <h4>posts</h4>\r\n                <Post title={props.title} onChange={onAddLike}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport profile from './Profile.module.css';\r\nimport {MyDiscription} from \"./MyPosts/Discription/MyDiscription\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {onPropsType} from \"./ProfileContainerClass\";\r\n\r\n\r\nexport function Profile(props: onPropsType) {\r\n    return (\r\n        <div className={profile.content}>\r\n            <img className={profile.titlePng}\r\n                 src=\"https://www.barnesandnoble.com/blog/sci-fi-fantasy/wp-content/nas-uploads/sites/4/2019/09/matrix.png\"\r\n                 alt=\"png\"/>\r\n            <MyDiscription profile={props.profile} status={props.status} updateStatus={props.updateStatusTC}  myId={props.myId}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import {AppThunkType} from \"./ReduxStore\";\r\nimport {ResultCodeForCaptcha, ResultCodesEnum, usersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype payloadType = {\r\n    userId: number,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean,\r\n}\r\n\r\ntype setUserDataACType = {\r\n    type: 'SET-USER-DATA',\r\n    payload: payloadType,\r\n\r\n}\r\n\r\ntype SetCaptchaType = {\r\n    type: 'SET-CAPTCHA',\r\n    captcha: boolean\r\n    url: string | undefined,\r\n}\r\n\r\ntype SetMessagesType = {\r\n    type: 'SET-MESSAGES'\r\n    messages: string | null,\r\n}\r\n\r\nexport type AllAuthReducerActionType =\r\n    setUserDataACType\r\n    | SetCaptchaType\r\n    | SetMessagesType\r\n\r\n\r\nexport let initialState = {\r\n    userId: 16115,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captcha: false,\r\n    url: undefined as string | undefined,\r\n    messages: null as string | null,\r\n}\r\nexport type initialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: initialStateType = initialState, action: AllAuthReducerActionType): initialStateType => {\r\n\r\n    switch (action.type) {\r\n        case  'SET-USER-DATA' :\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        case \"SET-MESSAGES\":\r\n            return {\r\n                ...state,\r\n                messages: action.messages\r\n            }\r\n        case \"SET-CAPTCHA\":\r\n            return {\r\n                ...state,\r\n                captcha: action.captcha,\r\n                url: action.url,\r\n            }\r\n\r\n        default:\r\n            return {...state};\r\n    }\r\n\r\n}\r\n\r\nexport const setUserData = (userId: number, email: string | null, login: string | null, isAuth: boolean): setUserDataACType => ({\r\n    type: 'SET-USER-DATA',\r\n    payload: {userId, email, login, isAuth},\r\n})\r\n\r\nexport const setCaptcha = (captcha: boolean, url: string | undefined): SetCaptchaType => ({\r\n    type: 'SET-CAPTCHA',\r\n    captcha,\r\n    url,\r\n\r\n})\r\nexport const setMessages = (messages: string): SetMessagesType => ({\r\n    type: 'SET-MESSAGES',\r\n    messages\r\n})\r\n\r\nexport const setUserIdTC = (): any => {\r\n    return (dispatch: Dispatch) => {\r\n        usersAPI.getLogin()\r\n            .then(res => res.data.data.id)\r\n    }\r\n\r\n}\r\n\r\nexport const setUserDataTC = (): any => {\r\n    return (dispatch: Dispatch) => {\r\n        return usersAPI.getLogin()\r\n            .then(response => {\r\n                if (response.data.resultCode === ResultCodesEnum.Success) {\r\n                    let {id, email, login} = response.data.data;\r\n                    dispatch(setUserData(id, email, login, true));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const captchaTC = (): AppThunkType => {\r\n    return (dispatch: Dispatch) => {\r\n        usersAPI.getCaptcha()\r\n            .then(res => {\r\n                dispatch(setCaptcha(true, res.data.url))\r\n            })\r\n    }\r\n}\r\n\r\nexport const loginTC = (email: string, password: string, rememberMe: boolean, captcha?: string): AppThunkType => {\r\n    return (dispatch) => {\r\n        usersAPI.login(email, password, rememberMe, captcha)\r\n            .then(res => {\r\n                if (res.data.resultCode === ResultCodeForCaptcha.Success) {\r\n                    dispatch(setUserDataTC())\r\n                } else if (res.data.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\r\n                    dispatch(captchaTC())\r\n                } else if (res.data.resultCode === ResultCodeForCaptcha.Error) {\r\n                    dispatch(setMessages(res.data.messages[0]))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const logOutTC = (): AppThunkType => {\r\n    return (dispatch) => {\r\n        usersAPI.logOut()\r\n            .then(res => {\r\n                if (res.data.resultCode === ResultCodesEnum.Success) {\r\n                    dispatch(setUserData(16115, null, null, false));\r\n                }\r\n            })\r\n    }\r\n}","import React, {ComponentType} from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    addLikePost,\r\n    addPost,\r\n    getStatusTC, ProfileType,\r\n    setUserProfileTC,\r\n    updateNewPostText,\r\n    updateStatusTC\r\n} from \"../../Redux/profileReducer\";\r\nimport {AppReduxStateType} from \"../../Redux/ReduxStore\";\r\nimport {Redirect, RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {setUserIdTC} from \"../../Redux/authReducer\";\r\n\r\n\r\nexport type onPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null,\r\n    status: string\r\n    myId : number\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: () => void,\r\n    updateNewPostText: (text: string | undefined) => void,\r\n    addLikePost: (id: string, count: number) => void,\r\n    setUserProfileTC: (userId: string | number) => void\r\n    Redirect: typeof Redirect\r\n    getStatusTC: (status: string ) => void\r\n    updateStatusTC: (status: string | null) => void\r\n    setUserId: () => void\r\n}\r\n\r\ntype PathParamType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamType> & onPropsType\r\n\r\n\r\nclass ProfileContainerClass extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n\r\n        this.props.setUserProfileTC(userId)\r\n        this.props.getStatusTC(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props} profile={this.props.profile} status={this.props.status}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppReduxStateType): MapStatePropsType => ( {\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    myId: state.auth.userId,\r\n\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps,\r\n        {getStatusTC, updateStatusTC, addPost, updateNewPostText, addLikePost, setUserProfileTC, setUserId: setUserIdTC, Redirect}),\r\n    withRouter,\r\n)(ProfileContainerClass)","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport header from './Header.module.css'\r\n\r\n\r\ntype HeaderPropsType = {\r\n    logOutTC: () => void\r\n    captchaTC: () => void\r\n    isAuth: boolean\r\n    login: string | null\r\n\r\n}\r\nexport function Header(props: HeaderPropsType) {\r\n    return (\r\n        <div className={header.header}>\r\n            <NavLink to={\"/profile\"}>\r\n                <img className={header.logo}\r\n                     src={\"https://seeklogo.com/images/M/michigan-wolverines-logo-9E0DB2CF1E-seeklogo.com.png\"}\r\n                     alt={\"logo\"}/>\r\n            </NavLink>\r\n            <div className={header.loginBlock}>\r\n                {props.isAuth ?\r\n                    <div>\r\n                        {props.login}\r\n                        <button onClick={props.logOutTC}>Log out</button>\r\n                    </div> :\r\n                    <NavLink to={'/login'}>Login</NavLink>}\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport {Header} from \"../Header/Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppReduxStateType} from \"../../Redux/ReduxStore\";\r\nimport {captchaTC, logOutTC} from \"../../Redux/authReducer\";\r\n\r\nexport type HeaderContainerPropsType = MapStatePropsType & mapDispatchToPropsType\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean,\r\n    login: any\r\n}\r\ntype mapDispatchToPropsType = {\r\n    logOutTC: () => void\r\n    captchaTC: () => void\r\n}\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerPropsType> {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Header {...this.props}/>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: AppReduxStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n})\r\n\r\nexport default connect(mapStateToProps, { logOutTC, captchaTC})(HeaderContainer)","import React from \"react\";\r\nimport login from \"./Login.module.css\"\r\nimport {Field, Form, Formik} from 'formik';\r\nimport {InputLogin, InputPassword, Textarea} from \"../../common/Preloader/FormsControls/FormsControls\";\r\nimport {captchaTC, loginTC, logOutTC} from \"../../Redux/authReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppReduxStateType} from \"../../Redux/ReduxStore\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Button} from \"antd\";\r\nimport {RedoOutlined} from '@ant-design/icons';\r\nimport 'antd/dist/antd.css';\r\n\r\nfunction validateEmail(value: any) {\r\n    let error;\r\n    if (!value) {\r\n        error = 'Required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\r\n        error = 'Invalid email address';\r\n    }\r\n    return error;\r\n}\r\n\r\nfunction validatePassword(value: any) {\r\n    let error;\r\n    if (!value) {\r\n        error = 'Required';\r\n    } else if (value.length < 6) {\r\n        error = 'Min length 6 symbol';\r\n    }\r\n    return error;\r\n}\r\n\r\ntype PropsType = MapDispatchToProps & MapStateToProps\r\ntype MapStateToProps = {\r\n    isAuth: boolean,\r\n    captcha: boolean,\r\n    url: string | undefined,\r\n    messages: string | null,\r\n}\r\ntype MapDispatchToProps = {\r\n    loginTC: (email: string, password: string, rememberMe: boolean, captcha?: string) => void\r\n    logOutTC: () => void,\r\n    captchaTC: () => void\r\n}\r\n\r\nconst LoginFormik = (props: PropsType) => {\r\n    if (props.isAuth) {\r\n        return <Redirect to={'profile'}/>\r\n    }\r\n    return (\r\n        <div className={login.container}>\r\n            <h1>Login</h1>\r\n            <Formik\r\n                initialValues={\r\n                    {\r\n                        email: '',\r\n                        password: '',\r\n                        rememberMe: false,\r\n                        captcha: '',\r\n                        messages: ''\r\n                    }\r\n                }\r\n                onSubmit={(values, {setSubmitting}) => {\r\n                    console.log(values.captcha)\r\n                    props.loginTC(values.email, values.password, values.rememberMe, values.captcha)\r\n                    setSubmitting(false)\r\n                }}\r\n            >\r\n\r\n                {({isSubmitting, errors, touched}) => (\r\n\r\n                    <Form>\r\n                        <div>\r\n                            <Field validate={validateEmail}\r\n                                   component={InputLogin}\r\n                                   name=\"email\"\r\n                                   placeholder={'email'}\r\n                                   type={'email'}/>\r\n                            {errors.email && touched.email && <div className={login.texterror}>{errors.email}</div>}\r\n                        </div>\r\n                        <div>\r\n                            <Field validate={validatePassword}\r\n                                   component={InputPassword}\r\n                                   name=\"password\"\r\n                                   placeholder={'password'}\r\n                                   type={'password'}\r\n                            />\r\n                            {errors.password && touched.password &&\r\n                            <div className={login.texterror}>{errors.password}</div>}\r\n                            {props.messages ? <div className={login.texterror}>{props.messages}</div> : ''}\r\n\r\n\r\n                        </div>\r\n\r\n                        <div>\r\n                            <Field type=\"checkbox\" name=\"rememberMe\"/> Remember Me\r\n                        </div>\r\n                        {props.captcha && <div>\r\n                            <Field name='captcha'\r\n                                   component={Textarea}\r\n                                   placeholder={'enter the text from the picture'}/>\r\n                            <img src={props.url} alt={'captcha'}/>\r\n                            <Button shape=\"circle\" onClick={props.captchaTC} icon={<RedoOutlined/>}/>\r\n                        </div>}\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Login\r\n                        </button>\r\n\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state: AppReduxStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    captcha: state.auth.captcha,\r\n    url: state.auth.url,\r\n    messages: state.auth.messages\r\n\r\n})\r\nexport default connect(mapStateToProps, {loginTC, logOutTC, captchaTC})(LoginFormik)\r\n\r\n\r\n","import {AppThunkType} from \"./ReduxStore\";\r\nimport {setUserDataTC} from \"./authReducer\";\r\n\r\n\r\ntype setInitializedACType = {\r\n    type: 'SET-INITIALIZED',\r\n    initialized: boolean,\r\n}\r\n\r\nexport type AllAppReducerActionType =\r\n    setInitializedACType\r\n\r\n\r\nexport let initialState = {\r\n    initialized: false\r\n}\r\nexport type initialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: initialStateType = initialState, action: AllAppReducerActionType): initialStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case  'SET-INITIALIZED' :\r\n            return {\r\n                ...state,\r\n                initialized: action.initialized,\r\n            }\r\n\r\n        default:\r\n            return {...state};\r\n    }\r\n\r\n}\r\n\r\nexport const setInitialized = ( initialized: boolean ): setInitializedACType => ({\r\n    type: 'SET-INITIALIZED',\r\n    initialized\r\n})\r\n\r\n\r\nexport const initializeAppTC = (): AppThunkType =>  {\r\n    return (dispatch) => {\r\n        let promise = dispatch(setUserDataTC());\r\n        promise.then( () => {\r\n            dispatch(setInitialized(true))\r\n        })\r\n    }\r\n}\r\n","import React, {ComponentType} from 'react';\nimport './App.css';\nimport {Dialogs} from \"./components/Dialogs/Dialogs\";\nimport {Route} from 'react-router-dom';\nimport {News} from \"./components/News/News\";\nimport {Music} from \"./components/Music/Music\";\nimport {Settings} from \"./components/Settings/Settings\";\nimport {NavbarContainer} from \"./components/Navbar/NavbarContainer\";\nimport FindUsersContainer from \"./components/find-users/FindUsersContainer\";\nimport ProfileContainerClass from \"./components/Profile/ProfileContainerClass\";\nimport HeaderContainer from \"./components/Navbar/HeaderContainer\";\nimport LoginFormik from \"./components/Login/LoginFormik\";\nimport {connect} from \"react-redux\";\nimport {compose} from 'redux';\nimport {initializeAppTC} from \"./Redux/appReducer\";\nimport {AppReduxStateType} from \"./Redux/ReduxStore\";\nimport {Preloader} from \"./common/Preloader/Preloader\";\nimport {setUserDataTC} from \"./Redux/authReducer\";\n\n\nexport type PostMessagesPropsType = {\n    id: string,\n    avatar: string,\n    nicName: string,\n    message: string,\n    count: number\n}\n\ntype MapDispatchPropsType = {\n    initializeAppTC: () => void\n    setUserDataTC: () => void\n}\ntype MapStateToPropsType = {\n    initialized: boolean\n    userId: number\n}\n\nclass App extends React.Component<MapDispatchPropsType & MapStateToPropsType> {\n\n    componentDidMount() {\n        this.props.initializeAppTC()\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n            return (\n                <div className=\"App-wrapper\">\n                    <HeaderContainer/>\n                    <div className={\"body\"}>\n                        <NavbarContainer/>\n                        <div className={\"content\"}>\n                            <Route path={`/profile/:userId?`}\n                                   render={() =>\n                                       <ProfileContainerClass/>}/>\n                            <Route path={\"/dialogs\"}\n                                   render={() =>\n                                       <Dialogs/>}\n                            />\n                            <Route path={\"/users\"}\n                                   render={() => <FindUsersContainer/>}/>\n                            <Route path={\"/news\"}\n                                   render={() => <News/>}/>\n                            <Route path={\"/music\"}\n                                   render={() => <Music/>}/>\n                            <Route path={\"/settings\"}\n                                   render={() => <Settings/>}/>\n                            <Route path={\"/login\"}\n                                   render={() => <LoginFormik/>}/>\n\n                        </div>\n                    </div>\n                </div>\n            );\n    }\n}\n\nconst mapStateToProps = (state: AppReduxStateType) => ({\n    initialized: state.app.initialized,\n    userId: state.auth.userId\n})\n\nexport default compose<ComponentType>(\n    connect(mapStateToProps, {initializeAppTC, setUserDataTC}),\n)(App);\n","import {v1} from \"uuid\";\r\n\r\n\r\nexport type AppNavbarPropsType = {\r\n    id: string,\r\n    title: string,\r\n    link: string\r\n}\r\nexport type AppNavbarActionType = SetNavbarUserDataType\r\n\r\n\r\nlet initialState = {\r\n    id: 16115,\r\n    list: [\r\n        {id: v1(), title: \"Profile\", link: '/profile'},\r\n        {id: v1(), title: \"Messages\", link: \"/dialogs\"},\r\n        {id: v1(), title: \"Users\", link: \"/users\"},\r\n        {id: v1(), title: \"News\", link: \"/news\"},\r\n        {id: v1(), title: \"Music\", link: \"/music\"},\r\n        {id: v1(), title: \"Settings\", link: \"/settings\"},\r\n    ]\r\n\r\n}\r\ntype ListType = Array<AppNavbarPropsType>\r\n\r\ntype initialStateType = {\r\n    list: ListType,\r\n    id: number\r\n}\r\n\r\nexport const navbarReducer = (state: initialStateType = initialState, action: AppNavbarActionType): initialStateType => {\r\n\r\n    return state;\r\n}\r\n\r\n\r\ntype SetNavbarUserDataType = {\r\n    type: 'SET-NAVBAR-USER-DATA',\r\n    payload: payloadType,\r\n}\r\ntype payloadType = {\r\n    userId: number,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean,\r\n}","import {applyMiddleware, combineReducers, createStore, Store} from \"redux\";\r\nimport {AllProfileReducerActionType, profileReducer} from \"./profileReducer\";\r\nimport {dialogsReducer} from \"./dialogsReducer\";\r\nimport {navbarReducer} from \"./navbarReducer\";\r\nimport {AllFindUsersActionCreatorType, findUsersReducer} from \"./findUsersReducer\";\r\nimport {AllAuthReducerActionType, authReducer} from \"./authReducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {AllAppReducerActionType, appReducer} from \"./appReducer\";\r\n\r\nexport type AppReduxStateType = ReturnType<typeof rootReducer>\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogPage: dialogsReducer,\r\n    navbar: navbarReducer,\r\n    usersPage: findUsersReducer,\r\n    auth: authReducer,\r\n    app: appReducer\r\n});\r\n\r\n\r\n\r\nexport let store: Store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppActionType = AllFindUsersActionCreatorType | AllAuthReducerActionType | AllProfileReducerActionType | AllAppReducerActionType\r\n\r\n\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType, AppReduxStateType, unknown, AppActionType>\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {store} from \"./Redux/ReduxStore\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\n\n    ReactDOM.render(\n        <BrowserRouter>\n            <Provider store={store}>\n            <App />\n            </Provider>\n        </BrowserRouter>,\n        document.getElementById('root')\n    );\n\n\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Dialog_content__23f12\",\"avatar\":\"Dialog_avatar__1-9FH\",\"message\":\"Dialog_message__1Hb5y\",\"nik\":\"Dialog_nik__1XQyc\",\"dialog\":\"Dialog_dialog__O9HFq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"FormsControls_login__1cW7T\",\"error\":\"FormsControls_error__2QQhQ\",\"password\":\"FormsControls_password__yHpun\",\"textarea\":\"FormsControls_textarea__19m4s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Contacts_content__3a6HL\",\"list\":\"Contacts_list__2W29v\",\"avatar\":\"Contacts_avatar__2JV4D\",\"listItem\":\"Contacts_listItem__3X24j\",\"link\":\"Contacts_link__cIJuw\",\"active\":\"Contacts_active__g99zB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__1_dZi\",\"avatar\":\"Post_avatar__3jqM0\",\"nic\":\"Post_nic__1O7jz\",\"title\":\"Post_title__2WE5X\",\"item\":\"Post_item__2rvKF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"MyDiscription_info__26E68\",\"avatar\":\"MyDiscription_avatar__3yrlC\",\"description\":\"MyDiscription_description__kJ4a7\",\"contacts\":\"MyDiscription_contacts__si2UA\",\"keys\":\"MyDiscription_keys__2n3Ts\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"siteBar\":\"Navbar_siteBar__liYBV\",\"link\":\"Navbar_link__3b_wi\",\"active\":\"Navbar_active__Ody2y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Login_container__2UvKi\",\"texterror\":\"Login_texterror__3ufmw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__t1gX1\",\"logo\":\"Header_logo__1cjEm\",\"loginBlock\":\"Header_loginBlock__3ptHi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__2AFRh\",\"titlePng\":\"Profile_titlePng__46oAW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Dialogs_content__D-PJt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textError\":\"Dialogformik_textError__SYetS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"News_content__2wxx3\",\"red\":\"News_red__20baX\",\"gold\":\"News_gold__36n4U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Music_content__3ZlLC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Settings_content__1W1TC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__nW1yS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ProfileStatus_container__1oRqt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"MyPosts_content__1Ra3j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"texterror\":\"Postformik_texterror__eyzgT\"};"],"sourceRoot":""}